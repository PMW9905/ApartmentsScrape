import json

from discord.ext import commands, tasks
from discord import Intents

import asyncio

from apartment_web_scraper import ApartmentWebScraper
from apartment_data import ApartmentData
from apartment_db import Database


# Config file will always be defined as config.json
# Must be generated by user before execution
config_file_path = 'config.json'

# Attempt to read json data into dict
print('Reading config data...')
try:
    opened_json_file = open(config_file_path, 'r')
    discord_bot_config = dict(json.load(opened_json_file))
    opened_json_file.close()
except Exception as e:
    print(f'Unable to open config file due to the following error:')
    print(e)
    quit()

# Spawning apartment_db
print('spawning apartment db...')
apartment_db = Database('apartment.db')
asyncio.run(apartment_db.create_tables())

# Spawning apartment_web_scraper
print('Spawning apartment_web_scraper...')
apartment_web_scraper = ApartmentWebScraper()
apartment_web_scraper.start_driver()

# Defining bot intents
print('Defining bot intents...')
intents = Intents.default()
intents.message_content = True

# Defining bot commands
print('Defining bot commands...')
bot = commands.Bot(command_prefix='!', intents = intents)

@bot.check
async def globally_whitelisted(ctx):
    return str(ctx.author.id) in discord_bot_config['whitelisted_user_ids']

# Basic greet command
@bot.command(name='get-my-id')
async def greet(ctx):
    print('Sending user id...')
    await ctx.send(ctx.author.id)

@bot.command(name='add-complex')
async def add_complex(ctx, complex_name: str, complex_url: str):
    result = await apartment_db.add_complex(complex_name, complex_url)

    if result:
        await ctx.send(f"Complex '{complex_name}' added successfully.")
    else:
        await ctx.send(f"An error occured while trying to add '{complex_name}'.")


@bot.command(name='remove-complex')
async def remove_complex(ctx, complex_name: str):
    result = await apartment_db.remove_complex(complex_name)

    if result:
        await ctx.send(f"Complex '{complex_name}' removed successfully.")
    else:
        await ctx.send(f"An error occured while trying to remove '{complex_name}'.")

@bot.command(name='add-layout')
async def add_layout(ctx, layout_name: str, complex_name: str):
    result = await apartment_db.add_layout(layout_name, complex_name)

    if result:
        await ctx.send(f"Layout '{layout_name}' added to '{complex_name}' successfully.")
    else:
        await ctx.send(f"An error occured while trying to add '{layout_name} to {complex_name}'.")

@bot.command(name='remove-layout')
async def remove_layout(ctx, layout_name: str, complex_name: str):
    result = await apartment_db.remove_layout(layout_name, complex_name)

    if result:
        await ctx.send(f"Layout '{layout_name}' removed from '{complex_name}' successfully.")
    else:
        await ctx.send(f"An error occured while trying to remove '{layout_name}' from '{complex_name}'.")

@bot.command(name='list-layouts')
async def list_layouts(ctx):
    complex_layouts = await apartment_db.list_all_layouts()

    if complex_layouts == False:
        await ctx.send('Failed to retrieve layouts.')
    else:
        message = ["Complexes and their layouts:"]
        for complex_name, layouts in complex_layouts.items():
            layouts_str = ', '.join(layouts)
            message.append(f"{complex_name}: {layouts_str}")
        await ctx.send('\n'.join(message))

@bot.command(name='list-complexes')
async def list_complexes(ctx):
    complexs = await apartment_db.list_all_complex()

    if complexs == False:
        await ctx.send('Failed to retrieve complexes.')
    else:
        message = ["Complexes:"]
        for complex_name, url in complexs.items():
            message.append(f"{complex_name}: {url}")
        await ctx.send('\n'.join(message))
    
# Demo get apartments command
@bot.command(name='get-available-apartments')
async def get_available_apartments(ctx, complex_name):
    url = await apartment_db.get_complex_url(complex_name)
    url = str(url)
    loop = asyncio.get_running_loop()

    print('Getting available apartments...')
    await ctx.send('Getting available apartments...')
    available_apartments = await loop.run_in_executor(None, apartment_web_scraper.get_available_apartments_from_url, url)

    # Formatting the table such that there is consistant whitespace inbetween columns.
    message = [
        "```",
        f"{'Unit':<6} | {'Layout':<15} | {'Cost':<8} | {'Sq Ft':<6} | {'Available':<8}",
        "-"*60,
    ]

    for apt in available_apartments:
        message.append(apt.get_formatted_string_for_discord_table())

    message.append("```")

    await ctx.send('\n'.join(message))

print('Running bot...')
bot.run(discord_bot_config['discord_bot_token'])

    